#%RAML 1.0
title: ID Broker API
version: 4
protocols: [ HTTPS ]
mediaType: application/json
securitySchemes:
  AuthzBearerToken:
      type: x-{other}
      describedBy:
        headers:
          Authorization:
            type: string
            example: Bearer abc123
securedBy: [ AuthzBearerToken ]

types:
  Authentication:
    type: object
    properties:
      username: string
      password: string
    example: |
      {
        "username": "john_smith",
        "password": "correcthorsebatterystaple"
      }
  Error:
    type: object
    properties:
      name: string
      message: string
      code: integer
      status: integer
    example: |
      {
        "name": "Bad Request",
        "message": "",
        "code": 0,
        "status": 400
      }
  UserResponse:
    description: >
      Information on user record. Password is not included if a password
      has not been assigned to the user.
    type: object
    properties:
      uuid?: string
      employee_id?: string
      first_name?: string
      last_name?: string
      display_name?: string
      username?: string
      email?: string
      active?:
        enum: [ yes, no ]
      locked?:
        enum: [ yes, no ]
      last_login_utc?: string
      manager_email?: string
      spouse_email?: string
      do_not_disclose:
        enum: [ yes, no ]
      mfa:
        type: object
        properties:
          prompt:
            enum: [ yes, no ]
          nag:
            enum: [ yes, no ]
          options: MfaResponse[]
      method:
        type: object
        properties:
          nag:
            enum: [ yes, no ]
      password?:
        type: object
        properties:
          created_utc: string
          expires_on: string
          grace_period_ends_on: string
    example: |
      {
        "uuid": "11111111-aaaa-1111-aaaa-111111111111",
        "employee_id": "12345",
        "first_name": "John",
        "last_name": "Smith",
        "display_name": "John Smith",
        "username": "john_smith",
        "email": "john_smith@example.com",
        "active": "yes",
        "locked": "no",
        "last_login_utc": "2017-05-24 14:04:51 UTC",
        "do_not_disclose": "no",
        "mfa": {
          "prompt": "yes",
          "nag": "no",
          "options": [
            {
              "id": 123,
              "type": "totp",
              "label": "Google Authenticator",
              "created_utc": "2017-10-24T20:40:47+00:00",
              "last_used_utc": null,
              "data": {
                "count": 10
              }
            },
            {
              "id": 234,
              "type": "u2f",
              "label": "Blue YubiKey",
              "created_utc": "2017-10-24T20:40:47+00:00",
              "last_used_utc": null,
              "data": {
                "count": 10
            }
            },
            {
              "id": 345,
              "type": "backupcode",
              "label": "2SV #1",
              "created_utc": "2017-10-24T20:40:47+00:00",
              "last_used_utc": null,
              "data": {
                  "count": 10
              }
            }
          ]
        },
        "password": {
          "created_utc":"2017-05-24 14:04:51 UTC",
          "expires_on":"2018-05-24 23:59:59 UTC",
          "grace_period_ends_on":"2018-06-23 23:59:59 UTC"
        },
        "method": {
          "nag": "no"
        }
      }
  UserCreation:
    type: object
    properties:
      employee_id: string
      first_name: string
      last_name: string
      display_name?: string
      username: string
      email: string
      active?:
        enum: [ yes, no ]
      locked?:
        enum: [ yes, no ]
      manager_email?: string
      spouse_email?: string
      do_not_disclose:
        enum: [ yes, no ]
    example: |
      {
        "employee_id": "12345",
        "first_name": "John",
        "last_name": "Smith",
        "username": "john_smith",
        "email": "john_smith@example.com",
        "do_not_disclose": "no"
      }
  UserUpdate:
    type: object
    properties:
      first_name?: string
      last_name?: string
      display_name?: string
      username?: string
      email?: string
      active?:
        enum: [ yes, no ]
      locked?:
        enum: [ yes, no ]
      manager_email?: string
      spouse_email?: string
      do_not_disclose?:
        enum: [ yes, no ]
    example: |
      {
        "active": "no"
      }
  MfaCreation:
    type: object
    properties:
      employee_id: string
      type:
        enum: [ backupcode, totp, u2f ]
      label?: string
    example: |
      {
        "employee_id": "12345",
        "type": "backupcode"
      }
  MfaCreationResponse:
    type: object
    properties:
      id: integer
      data: string[]
    example: |
      {
        "id": 3,
        "data": [
          "51231235",
          "74475261",
          "72412792",
          "23221473",
          "30936163",
          "09641891",
          "99517242",
          "08751652",
          "32842734",
          "25937677"
        ]
      }
  MfaResponse:
    type: object
    properties:
      id: integer
      type:
        enum: [ backupcode, totp, u2f ]
      label: string
      created_utc: string
      last_used_utc: string?
      data:
        type: object|array
    examples:
      backupcode: |
        {
            "id": 7,
            "type": "backupcode",
            "label": "2SV #1",
            "created_utc": "2017-10-24T20:40:47+00:00",
            "last_used_utc": null,
            "data": {
                "count": 10
            }
        }
      u2f: |
        {
            "id": 8,
            "type": "u2f",
            "label": "2SV #2",
            "created_utc": "2017-10-24T20:40:57+00:00",
            "last_used_utc": null,
            "data": []
        }
      totp: |
        {
            "id": 9,
            "type": "totp",
            "label": "2SV #3",
            "created_utc": "2017-10-24T20:41:05+00:00",
            "last_used_utc": null,
            "data": []
        }
  Method:
    type: object
    properties:
      employee_id: string
      value: string
    example: |
      {
        "employee_id": "12345",
        "value": "email@example.org"
      }
  MethodResponse:
    description:
    type: object
    properties:
      uid: string
      value: string
      verified: boolean
    example: |
      {
          "uid": "0YrSiNp2P6sfkleepNNvFYMQWuLfssve",
          "value": "email@example.org",
          "verified": true
      }
/authentication:
  post:
    body:
      type: Authentication
    responses:
      200:
        description: >
          The given credentials were acceptable/valid (i.e. - the
          authentication succeeded). The body of the response will have the
          attributes of the authenticated User.
        body:
          type: UserResponse
      400:
        description: >
          The given credentials were NOT acceptable/valid (i.e. - the
          authentication failed).
        body:
          type: Error
      500:
        description: A server-side error occurred.
        body:
          type: Error
/user:
  get:
    description: Get a list of the existing users.
    queryParameters:
      fields?:
        type: string
        description: A comma-delimited list of fields to include for each user.
        default: "fields=uuid,employee_id,first_name,last_name,display_name,username,email,active,locked,password"
        example: "fields=employee_id,active"
      username?:
        type: string
        description: Search user by username.
        example: "username=john_smith"
      email:
        description: Search user by email.
        required: false
        type: string
        example: "email=john_smith@example.com"
    responses:
      200:
        body:
          type: UserResponse[]
  post:
    description: Create a new user record.
    body:
      type: UserCreation
    responses:
      200:
        description: The new user record was created.
        body:
          type: UserResponse
      422:
        description: The given user data does not satisfy some validation rule.
        body:
          type: Error
      500:
        description: A server-side error occurred.
        body:
          type: Error
  /{employee_id}:
    get:
      description: Get information about a specific user.
      responses:
        200:
          description: >
            The corresponding user record (matching on the `employee_id` URL
            parameter).
          body:
            type: UserResponse
        204:
          description: No user record was found with that `employee_id`.
    put:
      description: Update a user record.
      body:
        type: UserUpdate
      responses:
        200:
          description: >
            The corresponding user record (matching on the `employee_id` URL
            parameter) was updated to match the given data.
          body:
            type: UserResponse
        204:
          description: No user record was found with that `employee_id`.
        422:
          description: The given user data does not satisfy some validation rule.
          body:
            type: Error
        500:
          description: A server-side error occurred.
          body:
            type: Error
    /mfa:
      get:
        description: Get a list of configured MFA devices for user
        responses:
          200:
            body:
              type: MfaResponse[]
          400:
            description: User not found for given `employee_id`
            body:
              type: Error
    /method:
      get:
        description: Get a list of verified and unverified recovery methods for user
        responses:
          400:
            description: User not found for given `employee_id`
            body:
              type: Error
          200:
            body:
              type: MethodResponse[]
    /password:
      put:
        description: Set the password for a User.
        body:
          properties:
            password: string
          example: |
            {
              "password": "correcthorsebatterystaple"
            }
        responses:
          200:
            description: >
              The password for the user with that `employee_id` was successfully updated.
            body:
              type: UserResponse
          204:
            description: No user record was found with that `employee_id`.
          409:
            description: A recently-used password was given.
            body:
              type: Error
              example: |
                {
                  "name": "Conflict",
                  "message": "May not be reused yet.",
                  "code": 1542395933,
                  "status": 409
                }
          422:
            description: >
              The given password does not meet some requirement (such as if an
              empty string was given or a recent password was reused).
            body:
              type: Error
          500:
            description: A server-side error occurred.
            body:
              type: Error
  /expiring:
    get:
      description: Get a list of the active users whose password is expiring on a given date.
      queryParameters:
        grace_period_ends_on:
          type: string
          example: "grace_period_ends_on=2017-06-14"
        expires_on:
          type: string
          example: "expires_on=2017-06-14"
      responses:
        200:
          body:
            type: UserResponse[]
  /first-password:
    get:
      description: Get a list of the active users whose first password was created on a given date.
      queryParameters:
        created_on?:
          type: string
          default: "created_on=<today's date>"
          example: "created_on=2017-06-14"
      responses:
        200:
          body:
            type: UserResponse[]
/mfa:
  post:
    description: Create a new mfa record.
    body:
      type: MfaCreation
    responses:
      200:
        description: The new mfa record was created.
        body:
          type: MfaCreationResponse
      400:
        description: The given mfa data does not satisfy some validation rule.
        body:
          type: Error
      500:
        description: The server encountered an error
        body:
          type: Error
  /{id}:
    put:
      description: Update an MFA label
      body:
        properties:
          employee_id: string
          label: string
        example: |
          {
            "employee_id": "12345",
            "label": "My blue USB key"
          }
      responses:
        200:
          body:
            type: MfaResponse
        400:
          description: Missing or invalid employee_id
          body:
            type: Error
        404:
          description: MFA record not found or mismatched employee_id
          body:
            type: Error
        500:
          description: The server encountered an error
          body:
            type: Error
    delete:
      description: Delete an MFA configuration
      body:
        properties:
          employee_id: string
        example: |
          {
            "employee_id": "12345"
          }
      responses:
        204:
          description: Successful deletion of record
        400:
          description: >
            `employee_id` was not provided or it did not match an employee record
          body:
            type: Error
        404:
          description: The MFA record was not found
          body:
            type: Error
        500:
          description: Unable to delete the MFA record
          body:
            type: Error
    /verify:
      post:
        description: Verify the value provided for this MFA device.
        body:
          properties:
            employee_id: string
            value: string
          example: |
            {
              "employee_id": "12345",
              "value": "01234987"
            }
        responses:
          204:
            description: Value provided passed verification
          400:
            description: >
              Value provided failed verification or was unacceptable for some
              other reason (such as an invalid `employee_id`).
            body:
              type: Error
          404:
            description: No MFA record found with that `id` and `employee_id`.
            body:
              type: Error
          429:
            description: >
              Too many failed attempts for this MFA record recently.
            body:
              type: Error
/method:
  post:
    description: >
      Create a new recovery method and send verification email. At this point,
      all methods are email, so 'value' is always an email address.
    body:
      type: Method
    responses:
      200:
        description: Recovery method created and email sent.
        body:
          type: MethodResponse
      400:
        description: Missing parameter
        body:
          type: Error
      409:
        description: New method matches an already existing verified method
        body:
          type: Error
      500:
        description: Database or other system error
        body:
          type: Error
  /{uid}:
    get:
      description: Retrieve a specific, verified recovery method.
      body:
        properties:
          employee_id: string
        example: |
          {
            "employee_id": "12345"
          }
      responses:
        200:
          description: Recovery method found
          body:
            type: MethodResponse
        404:
          description: User not found or method not found
          body:
            type: Error
    delete:
      description: Delete a specific recovery method.
      body:
        properties:
          employee_id: string
        example: |
          {
            "employee_id": "12345"
          }
      responses:
        204:
          description: Recovery method found and deleted
        404:
          description: User not found or method not found
          body:
            type: Error
        500:
          description: Delete failed
          body:
            type: Error
    /verify:
      put:
        description: Verify the recovery method by a matching code.
        body:
          properties:
            employee_id: string
            code: string
          example: |
            {
              "employee_id": "12345",
              "code": "987654"
            }
        responses:
          200:
            description: Provided code matches original code
            body:
              type: MethodResponse
          400:
            description: Missing or invalid code
          404:
            description: User not found or method not found
            body:
              type: Error
          429:
            description: Too many verification attempts
            body:
              type: Error
          500:
            description: Database or other system error
            body:
              type: Error
    /resend:
      put:
        description: Resend the method verification email
        body:
          properties:
            employee_id: string
          example: |
            {
              "employee_id": "12345"
            }
        responses:
          204:
            description: Method found and email sent
          400:
            description: Method already verified
            body:
              type: Error
          404:
            description: User not found or method not found
            body:
              type: Error
